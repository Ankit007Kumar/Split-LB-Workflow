name: Main Deploy Workflow

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI

jobs:
  deploy_load_balancer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create Load Balancer (if doesn't exist)
        run: |
          # Check if the Load Balancer exists
          lb_exists=$(aws elbv2 describe-load-balancers --names ${{ secrets.LOAD_BALANCER_NAME }} --query "LoadBalancers[0].LoadBalancerName" --output text)
          if [ "$lb_exists" == "None" ]; then
            echo "Load Balancer doesn't exist, creating a new one."
            aws elbv2 create-load-balancer --name ${{ secrets.LOAD_BALANCER_NAME }} \
              --subnets ${{ secrets.SUBNET_IDS }} --security-groups ${{ secrets.SECURITY_GROUP_IDS }} \
              --scheme internet-facing --load-balancer-type application
          else
            echo "Load Balancer already exists."
          fi

      - name: Attach Frontend IP Configuration (Elastic IP)
        run: |
          # Allocate an Elastic IP if not already allocated
          eip=$(aws ec2 describe-addresses --filters "Name=domain,Values=vpc" --query "Addresses[0].PublicIp" --output text)
          if [ "$eip" == "None" ]; then
            echo "Allocating new Elastic IP."
            eip=$(aws ec2 allocate-address --domain vpc --query "PublicIp" --output text)
          fi

          # Associate Elastic IP with the Load Balancer
          lb_arn=$(aws elbv2 describe-load-balancers --names ${{ secrets.LOAD_BALANCER_NAME }} --query "LoadBalancers[0].LoadBalancerArn" --output text)
          aws elbv2 add-listener-certificates --listener-arn $lb_arn --certificates CertificateArn=${{ secrets.CERTIFICATE_ARN }}
          
          echo "Elastic IP $eip associated with Load Balancer."

      - name: Deploy Application to Load Balancer
        run: |
          # Deploy your application code here, for example, updating EC2 instances behind the Load Balancer
          echo "Deploying backend services to EC2 instances behind Load Balancer."

      - name: Verify Load Balancer Status
        run: |
          aws elbv2 describe-load-balancers --names ${{ secrets.LOAD_BALANCER_NAME }} --query "LoadBalancers[0].State" --output text
